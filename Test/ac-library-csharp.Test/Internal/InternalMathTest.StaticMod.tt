<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
Func<int, bool> IsPrime = n =>
{
    if(n%2==0) return n == 2;
    for(int i=3;(long)i*i<=n;i+=2)
    {
        if(n%i==0)
            return false;
    }
    return true;
};
var primes = Enumerable.Range(2,10000-1).Where(IsPrime).ToArray();
var primesR = Enumerable.Range(0,1000).Select(i=>int.MaxValue-i).Where(IsPrime).ToArray();
#>
// <auto-generated>
// DO NOT CHANGE THIS FILE.
// </auto-generated>
using System.Collections.Generic;

namespace AtCoder.Internal
{
    public partial class InternalMathTest
    {
<# foreach(int m in new[]{469762049,167772161,754974721,324013369,831143041,1685283601}){#>
        private struct Mod<#= m #>: IStaticMod { public uint Mod => <#= m #>; public bool IsPrime => true; }
<# } #>
<# foreach(var m in primes){#>
        private struct Mod<#= m #>: IPrimitiveRootFactory, IStaticMod { public uint Mod => <#= m #>; public bool IsPrime => true; public int PrimitiveRoot() => InternalMath.PrimitiveRoot<Mod<#= m #>>(); }
<# } #>
<# foreach(var m in primesR){#>
        private struct Mod<#= m #>: IPrimitiveRootFactory, IStaticMod { public uint Mod => <#= m #>; public bool IsPrime => true; public int PrimitiveRoot() => InternalMath.PrimitiveRoot<Mod<#= m #>>(); }
<# } #>
        private Dictionary<int,IPrimitiveRootFactory> mods = new Dictionary<int,IPrimitiveRootFactory>{
<# foreach(var m in primes){#>
{ <#= m #>, default(Mod<#= m #>)},
<# } #>
<# foreach(var m in primesR){#>
{ <#= m #>, default(Mod<#= m #>)},
<# } #>
        };
    }
}
